import os
import shutil
import requests
from fastapi import APIRouter, Request, Form, File, UploadFile, Depends
from starlette.responses import RedirectResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session

from app.auth import get_session
from app.models import User
from app.auth import get_session_user

templates = Jinja2Templates(directory="templates")

router = APIRouter()

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

import uuid

ALLOWED_EXTENSIONS = {"pdf", "png", "jpg", "jpeg"}


def send_telegram_notification(user: User, company_name: str, city: str, inn_or_ogrn: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        return
    
    from datetime import datetime
    
    text = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name} (ID: {user.id})\n"
        f"üìß Email: {user.email}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        f"üìã –ò–ù–ù/–û–ì–†–ù: {inn_or_ogrn}\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {user.passport_filename}\n\n"
        f"‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            data={"chat_id": TELEGRAM_CHAT_ID, "text": text}
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")


def generate_safe_filename(original_filename: str, user_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ "passport_<user_id>_<UUID>.<ext>"
    (–µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –∏–Ω–∞—á–µ –±–µ–∑ –Ω–µ–≥–æ).
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    _, ext = os.path.splitext(original_filename)
    ext = ext.lower().lstrip(".")  # —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
    new_name = f"passport_{user_id}_{uuid.uuid4().hex}"

    # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º
    if ext in ALLOWED_EXTENSIONS:
        return f"{new_name}.{ext}"
    else:
        return new_name

@router.get("/onboarding", response_class=HTMLResponse)
def onboarding_form(
    request: Request,
    current_user: User = Depends(get_session_user)
):
    if not current_user:
        return RedirectResponse("/login", status_code=302)

    if current_user.is_blocked:
        response = RedirectResponse("/login", status_code=302)
        response.delete_cookie("access_token")
        return response

    if current_user.verification_status == "approved":
        return RedirectResponse("/", status_code=302)

    if current_user.verification_status == "pending":
        return templates.TemplateResponse("onboarding_pending.html", {
            "request": request,
            "user": current_user
        })

    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—É —Ñ–æ—Ä–º—É
    return templates.TemplateResponse("onboarding.html", {
        "request": request,
        "user": current_user
    })

@router.post("/onboarding")
def submit_onboarding(
        request: Request,
        company_name: str = Form(...),
        city: str = Form(...),
        inn_or_ogrn: str = Form(...),
        passport_file: UploadFile = File(...),
        db: Session = Depends(get_session),
        current_user: User = Depends(get_session_user)
):
    user = db.query(User).filter(User.id == current_user.id).first()
    if user.verification_status == "pending":
        return templates.TemplateResponse("onboarding_pending.html", {
            "request": request,
            "user": user,
            "message": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
        })

    if user.verification_status == "approved":
        return RedirectResponse("/", status_code=302)

    _, ext = os.path.splitext(passport_file.filename)
    ext = ext.lower().lstrip(".")

    if ext not in ALLOWED_EXTENSIONS:
        return templates.TemplateResponse("onboarding.html", {
            "request": request,
            "user": current_user,
            "error_message": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: .{ext}. "
                             f"–†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(ALLOWED_EXTENSIONS)}."
        })

    MAX_MB = 20
    MAX_SIZE = MAX_MB * 1024 * 1024

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
    passport_file.file.seek(0, 2)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    file_size = passport_file.file.tell()  # –°—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (—Ä–∞–∑–º–µ—Ä)
    passport_file.file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

    if file_size > MAX_SIZE:
        # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        return templates.TemplateResponse("onboarding.html", {
            "request": request,
            "user": current_user,
            "error_message": f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_MB} –ú–ë. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç."
        })

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ¬´–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ¬ª –∏–º—è –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ:
    filename = generate_safe_filename(passport_file.filename, current_user.id)
    # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (—Å–º. –Ω–∏–∂–µ)

    filepath = os.path.join("static", "uploads", filename)
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

    with open(filepath, "wb") as buffer:
        shutil.copyfileobj(passport_file.file, buffer)

    user.company_name = company_name
    user.city = city
    user.inn_or_ogrn = inn_or_ogrn
    user.passport_filename = filename
    user.verification_status = "pending"
    user.rejection_reason = None
    db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    send_telegram_notification(user, company_name, city, inn_or_ogrn)

    return templates.TemplateResponse("onboarding_submitted.html", {"request": request})
