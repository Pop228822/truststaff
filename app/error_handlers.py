"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
from fastapi import FastAPI, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import JSONResponse
import traceback
import logging

from app.error_notifications import send_500_error_notification, send_error_notification

templates = Jinja2Templates(directory="templates")
logger = logging.getLogger(__name__)


def setup_error_handlers(app: FastAPI) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""
    
    @app.exception_handler(404)
    async def not_found(request: Request, exc: HTTPException):
        """–û—Ç–¥–∞—ë–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É 404 —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞ –≥–ª–∞–≤–Ω—É—é¬ª."""
        return templates.TemplateResponse(
            "404.html",
            {"request": request},
            status_code=404
        )
    
    @app.exception_handler(500)
    async def internal_server_error(request: Request, exc: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        print(f"üö® 500 ERROR HANDLER –≤—ã–∑–≤–∞–Ω!")
        print(f"üö® –û—à–∏–±–∫–∞: {exc}")
        print(f"üö® –¢–∏–ø –æ—à–∏–±–∫–∏: {type(exc)}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            user_info = None
            try:
                from app.auth import get_current_user_safe
                current_user = get_current_user_safe(request)
                if current_user:
                    user_info = f"{current_user.name} ({current_user.email})"
            except:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            send_500_error_notification(exc, request, user_info)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"500 Error: {exc}", exc_info=True)
            
        except Exception as notification_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å—Ç—É—é –æ—à–∏–±–∫—É
        return JSONResponse(
            status_code=500,
            content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."}
        )
    
    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTTPException (–æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ)
        if isinstance(exc, HTTPException):
            raise exc
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = None
            try:
                from app.auth import get_current_user_safe
                current_user = get_current_user_safe(request)
                if current_user:
                    user_info = f"{current_user.name} ({current_user.email})"
            except:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if not isinstance(exc, (HTTPException,)):
                send_error_notification(exc, request, user_info)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"Unhandled Exception: {exc}", exc_info=True)
            
        except Exception as notification_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 500 –æ—à–∏–±–∫—É
        return JSONResponse(
            status_code=500,
            content={"detail": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."}
        )
